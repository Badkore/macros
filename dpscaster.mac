
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|
| DPS Pet Caster - Farming and Looting - Master script
|
| Set the Pet Caster running this macro as the Group MA 
| 
|   Requires the following:
|   Hotkey2 - build a hotkey macro with a low and slow DPS rotation
|   Hotkey3 - /pet attack
|   Hotkey4 - build a hotkey macro with a heavy DPS burn rotation - NOT IMPLEMENTED YET
|   Hotkey6 - /assist %tankname (put the real tank name in plz)
|   Hotkey9 - /Sit
|   Active Pet for pulling targets
|   Requires you to SET ROLES for Main Tank and Main Assist. <<-- Very Important!
|   
|   This macro has 3 startup parameter:
|  Param1 - search radius for mobs (think in terms of feet on a scale basis)
|  Param2 - 1 if you would like to set your current position as the "Sticky" point. 0 or blank to ignore sticky
|
|  Example startup: /macro dpscaster 150 1
|      The above startup will actively scan a 150 foot radius around the char based on
|       whatever your current location is and attack anything that has a partial name
|       match for whatever names you specified in the ini file.
|
|  This macro will loot the nearest corpse to the player that has a partial name match
|     to the currently active target name, approach it and loot all items unless limits or
|     zeros are set in the DPSCaster.ini file.
|
|    Props to the Forage and Farm macros had been modified by many people.
|    Props also to zizak51 for his easy to use being attacked sub-routine Logic
|
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

#include ninjadvloot.inc
#include AAPurchase.inc

#event Farm_talk "#*#tells you#*#"
#event We_Died "#*#entered#*#Slaughter#*#"
#event Check_Damage "#*# hits YOU for#*#"
#event Check_Damage "#*# mauls YOU for#*#"
#event Check_Damage "#*# bashes YOU for#*#"
#event Exp "You gain#*#Experience#*#"
#event Stickin "#*# tell your party,'Camping here#*#"
#event LoreHideCorpse "#*#You already have one#*#"

#turbo

Sub Main
/declare pull int outer 1
/declare stickyon int outer ${Param1}
/declare HaveMoved int outer
/declare PrctExp float outer
/declare PrctAAExp float outer
/declare Exper float outer
/declare Exper1 float outer
/declare Exper2 float outer
/declare AAExp float outer
/declare Expstart float outer
/declare AAstart float outer
/declare targ1 string outer
/declare targ2 string outer
/declare targ3 string outer
/declare targ4 string outer
/declare targ5 string outer
/declare dist int outer ${Param0}
/declare locy float outer
/declare locx float outer
/declare mob string outer
/declare i int local
/declare AlertTank string outer FALSE
/declare UnderAttack string outer FALSE
/declare snaregem int outer 3
/declare nukeDelay timer outer ${If[${Select[${Me.Class.ShortName},PAL,SHD,BST,BRD,RNG]},8s,1s]}
/declare EarthenFlag int outer 0
/declare HideMobCounter int outer 0
/varset HaveMoved 0
/varset PrctExp 0
/varset PrctAAExp 0
/varset Exper ${Me.PctExp}
/varset Exper1 0
/varset Exper2 0
/varset AAExp ${Me.PctAAExp}
/varset Expstart ${Me.Exp}
/varset AAstart ${Me.PctAAExp}
/varset targ1 ${Ini[DPSCaster.ini,MobList,name1]}
/varset targ2 ${Ini[DPSCaster.ini,MobList,name2]}
/varset targ3 ${Ini[DPSCaster.ini,MobList,name3]}
/varset targ4 ${Ini[DPSCaster.ini,MobList,name4]}
/varset targ5 ${Ini[DPSCaster.ini,MobList,name5]}
/varset mob ${targ1}
/call SetupAdvLootVars
/call AAInit
|====  Check if the Sticky flag has been set ====
   /if (${stickyon}==1) {
|      /call Event_Stickin
		/makecamp on leash 200
   } else {
      /echo No stickypoint set
   }
   :startpoint
    /if (${Window[AlertWnd]}) /notify AlertWnd ALW_Close_Button leftmouseup
   /squelch /target clear 
   /delay 2s
   /call CheckCombat
|====  Move to sticky point if not already in combat ====
   /squelch /target clear
|   /if (!${Me.XTarget} && !${Me.Sitting} && ${locy}!=0 && ${HaveMoved}==1) {
|	   /moveto loc ${locy} ${locx}
|	   /varset HaveMoved 0
|	   /delay 10s !${Me.Moving}
|   }
   /squelch /target clear
   /if (${Me.Class.PetClass}) /call Pet
   /call CheckCombat
   /if (${UnderAttack.Equal[FALSE]}) {
	   /if (${Me.UseAdvancedLooting}) {
	       /call UseAdvLoot
	   } else {
	       /call LootMobs
	   }
		/if (${Me.AltAbilityReady[elemental form: water]} && (!${Defined[EFormWaterFlag]}||${EFormWaterFlag}<10)) {
			/casting "elemental form: water"
			/delay 10s !${Me.Casting.ID}
			/delay 2s
			/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
				/if (!${Defined[EFormWaterFlag]}) /declare EFormWaterFlag timer outer
				/varset EFormWaterFlag 2160s
			}
		}
	   /call buff
	   /call CheckMana
	   /if (${HaveMoved}==1) /goto :startpoint
   }
   /echo Looking for a mob:
   /if (!${Me.XTarget}) /call FindMob
   /if ((${Target.ID}>0 && ${Me.XTarget}==0) || ${UnderAttack.Equal[TRUE]}) /call Combat 
   /doevents
   /goto :startpoint
/return   

Sub Event_Stickin
   /echo Setting location ${Me.Y} ${Me.X}
   /varset locy ${Me.Y}
   /varset locx ${Me.X}
/return

Sub Event_Exp
   /declare RunTime int local
   /declare RunTime1 float local
   /varset RunTime1 0
   /varcalc RunTime ${Macro.RunTime}/60
| Exper = XP from last Kill
   /varcalc Exper ${Me.Exp}-${Exper}
| Exper2 is running total of XP gained since start
   /varcalc Exper2 ${Exper2}+${Exper}
| PrctExp is the Percent left to level
   /varcalc PrctExp 100-${Me.PctExp}
   /varcalc RunTime1 ${RunTime}/60
   /if (${RunTime1}<.01) /varset RunTime1 .01
|Exper1 is Approx XP per hour
   /varcalc Exper1 ${Exper2}/${RunTime1}
   /echo [Last Kill]: ${Exper} [Total EXP]: ${Exper2} in [${RunTime}] Minutes...
   /echo [%EXP to level]: ${PrctExp}%   [Exp per hr]: ${Exper1}
   /echo LootMobs
   /if (${Me.UseAdvancedLooting}) {
       /call UseAdvLoot
   } else {
       /call LootMobs
   }
/return

		
Sub Event_LoreHideCorpse
	/varset HideMobCounter ${HideMobCounter}+1
	|/echo HideMobCounter is ${HideMobCounter}
	/if (${HideMobCounter}>=3) {
		   /hidecorpse all
		   /varset HideMobCounter 0
	}
/return


Sub Event_Check_Damage
   |/gsay ${Target.CleanName} is attacking me!! Get it off!
   /call MoveBack
   /doevents flush Check_Damage
   /call CheckCombat
/return
                                                                                          
Sub SpellCheck2
/if (!${Target.ID}||(${Target.Type.Equal[pc]}||${Target.Master.Type.Equal[pc]}||${Target.Type.Equal[corpse]})||${nukeDelay}) /return
/declare icast int local
/for icast 1 to 12
	/if (!${Target.ID}||(${Target.Type.Equal[pc]}||${Target.Master.Type.Equal[pc]}||${Target.Type.Equal[corpse]})||${nukeDelay}) /return
	/if (${Me.CurrentMana}>${Me.Gem[${icast}].Mana} && ${Me.Gem[${icast}].Category.Length} && !${Me.GemTimer[${icast}]}) {
		/if (${Me.CurrentMana}>${Me.Gem[${icast}].Mana} && ${Me.Gem[${icast}].Category.Find[Detrimental]} && ${Select[${Me.Gem[${icast}].Subcategory},Slow,Resist Debuffs,Disempowering,Mana Drain]} && (!${${Target.ID}_${Me.Name}_${icast}}||${${Target.ID}_${Me.Name}_${icast}}!<5)) {
			/if (!${Defined[xa]}) /declare xa int local
			/for xa 1 to ${Me.XTarget}
				/if (!${${Me.XTarget[${xa}].ID}_${Me.Name}_${icast}} || ${${Me.XTarget[${xa}].ID}_${Me.Name}_${icast}}<10) {
					/target ${Me.XTarget[${xa}]}
					|/g casting "${Me.Gem[${icast}]}" 1
					/casting "${Me.Gem[${icast}]}" gem${icast} -maxtries|3
					/delay 10s !${Me.Casting.ID}
					/delay 2s
					/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
						/if (!${Defined[${Target.ID}_${Me.Name}_${icast}]}) /declare ${Target.ID}_${Me.Name}_${icast} timer outer
						/varset ${Target.ID}_${Me.Name}_${icast} ${Me.Gem[${icast}].Duration.TotalSeconds}s
						/g ${Me.Gem[${icast}]} on ${Target.CleanName}
						/delay 2s
					}
				}
			/next xa
		}
		/if (${Me.Gem[${icast}].Category.Find[Direct Damage]} && ${Me.PctAggro}<65) {
			|/g casting "${Me.Gem[${icast}]}" 2
			/casting "${Me.Gem[${icast}]}" gem${icast} -maxtries|3
			/delay 10s !${Me.Casting.ID}
			/delay 2s
			/varset nukeDelay ${nukeDelay.OriginalValue}
		}
		/if (${Me.CurrentMana}>${Me.Gem[${icast}].Mana} && ${Me.Gem[${icast}].Category.Find[Damage Over Time]} && (!${${Target.ID}_${Me.Name}_${icast}}||${${Target.ID}_${Me.Name}_${icast}}<5)) {
			|/g casting "${Me.Gem[${icast}]}" 3
			/casting "${Me.Gem[${icast}]}" gem${icast} -maxtries|3
			/delay 10s !${Me.Casting.ID}
			/delay 2s
			/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
				/if (!${Defined[${Target.ID}_${Me.Name}_${icast}]}) /declare ${Target.ID}_${Me.Name}_${icast} timer outer
				/varset ${Target.ID}_${Me.Name}_${icast} ${Me.Gem[${icast}].Duration.TotalSeconds}s
			}
		}
		/if (${Me.CurrentMana}>${Me.Gem[${icast}].Mana} && ${Me.Gem[${icast}].Category.Equal[LifeTap]} && ${Me.CurrentHPs}<85 && ${Me.PctAggro}<85) {
			|/g casting "${Me.Gem[${icast}]}" 4
			/casting "${Me.Gem[${icast}]}" gem${icast} -maxtries|3
			/delay 10s !${Me.Casting.ID}
			/delay 2s
		}
		/if (${Me.CurrentMana}>${Me.Gem[${icast}].Mana} && ${Select[${Me.Gem[${icast}].Subcategory},Enthrall]} && ${Me.XTarget}>1) {
			/declare x int local
			/for x 1 to ${Me.XTarget}
				/if (${Me.XTarget[${x}].ID} && ${Spawn[${Me.XTarget[${x}].ID}].Level}<=${Me.Gem[${icast}].MaxLevel} && !${Me.XTarget[${x}].ID} && !${Spawn[${Me.XTarget[${x}].ID}].Named} && (${Spell[${Me.Gem[${icast}]}].TargetType.Equal[${Spawn[${Me.XTarget[${x}].ID}].Body}]}||!${Select[${Me.Gem[${icast}].TargetType},Animal,Humanoid,Undead,Plant,Summoned,Uber Giants,Uber Dragons]})) {
					/squelch /tar id ${Me.XTarget[${x}].ID}
					/delay 1s ${Target.ID}==${Me.XTarget[${x}].ID}
					|/g casting "${Me.Gem[${icast}]}" 5
					/casting "${Me.Gem[${icast}]}" gem${icast} -maxtries|3
					/delay 10s !${Me.Casting.ID}
					/delay 2s
					/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
						/if (!${Defined[${Me.XTarget[${x}].ID}_${Me.Name}_${icast}]}) /declare ${Me.XTarget[${x}].ID}_${Me.Name}_${icast} timer outer
						/varset ${Me.XTarget[${x}].ID}_${Me.Name}_${icast} ${Me.Gem[${icast}].Duration.TotalSeconds}s
						/if (!${MezList.Find[${Me.XTarget[${x}].ID}]}) /varset MezList ${Me.XTarget[${x}].ID}|
						/echo MezList: ${MezList}
					}
				}
			/next x
		}
	}
	/doevents
/next icast
/return

		
		Sub Buff
			/if (${Me.Invis}) /return
			/declare ibuff int local
			/declare buffGroupMember int local
			/for buffGroupMember 0 to ${Group}
				/squelch /tar id ${Group.Member[${buffGroupMember}].ID}
				/for ibuff 1 to 12
					/if (${Me.CurrentMana}>${Me.Gem[${ibuff}].Mana} && ${Me.Gem[${ibuff}].TargetType.Find[group]} && ${Me.Gem[${ibuff}].Duration.TotalSeconds}>300 && !${Me.Gem[${ibuff}].TargetType.Equal[pet]} && !${Select[${Me.Gem[${ibuff}].Subcategory},Misc,Invisibility,Undead,Invulnerability]}) {
						/if (!${Defined[groupbuff_${ibuff}]} || ${groupbuff_${ibuff}}<10) {
							/squelch /tar id ${Group.Member[${buffGroupMember}].ID}
							/casting "${Me.Gem[${ibuff}]}" gem${ibuff} -maxtries|3
							/delay 10s !${Me.Casting.ID}
							/delay (${Me.Gem[${ibuff}].RecoveryTime)s
							/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
								/if (!${Defined[groupbuff_${ibuff}]}) /declare groupbuff_${ibuff} timer outer
								/varset groupbuff_${ibuff} ${Me.Gem[${ibuff}].Duration.TotalSeconds}s
								/echo Group Buff ${Me.Gem[${ibuff}]} timer, ${Me.Gem[${ibuff}].Duration.TotalSeconds}s
							}		
						}
					}
					/if (${Me.CurrentMana}>${Me.Gem[${ibuff}].Mana} && ${Me.Gem[${ibuff}].SpellType.Equal[beneficial]} && ${Me.Gem[${ibuff}].Duration.TotalSeconds}>300 && !${Me.Gem[${ibuff}].TargetType.Equal[pet]} && !${Me.Gem[${ibuff}].TargetType.Equal[self]} && !${Me.Gem[${ibuff}].TargetType.Find[group]} && !${Select[${Me.Gem[${ibuff}].Subcategory},Misc,Invisibility,Undead,Invulnerability]}) {
						|/echo bufftimer if (!${Defined[bufftimer_${Me.Name}_${ibuff}]} || ${bufftimer_${Me.Name}_${ibuff}}<10)
						/if (!${Defined[buff${buffGroupMember}${Me.Gem[${ibuff}].ID}${ibuff}]} || ${buff${buffGroupMember}${Me.Gem[${ibuff}].ID}${ibuff}}<10) {
							/squelch /tar id ${Group.Member[${buffGroupMember}].ID}
							/casting "${Me.Gem[${ibuff}]}" gem${ibuff} -maxtries|3
							/delay 10s !${Me.Casting.ID}
							/delay (${Me.Gem[${ibuff}].RecoveryTime)s
							/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
								/if (!${Defined[buff${buffGroupMember}${Me.Gem[${ibuff}].ID}${ibuff}]}) /declare buff${buffGroupMember}${Me.Gem[${ibuff}].ID}${ibuff} timer outer
								/varset buff${buffGroupMember}${Me.Gem[${ibuff}].ID}${ibuff} ${Me.Gem[${ibuff}].Duration.TotalSeconds}s
								/echo Single Target Buff ${Me.Gem[${ibuff}]} timer, ${Me.Gem[${ibuff}].Duration.TotalSeconds}s
							}		
						}
					}
					/if ((${Me.CurrentMana}>${Me.Gem[${ibuff}].Mana} && ${Me.Gem[${ibuff}].SpellType.Equal[beneficial]} && ${Me.Gem[${ibuff}].Duration.TotalSeconds}>300 && ${Me.Gem[${ibuff}].TargetType.Equal[self]})||(${Me.Gem[${ibuff}].Name.Equal[holy aura]}&&${HolyAuraFlag}<1)) {
						/if (!${Defined[bufftimer_${Target.Name}_${ibuff}]} || ${bufftimer_${Target.Name}_${ibuff}}<10) {
							/casting "${Me.Gem[${ibuff}]}" gem${ibuff} -maxtries|3
							/delay 10s !${Me.Casting.ID}
							/delay (${Me.Gem[${ibuff}].RecoveryTime)s
							/if (${Cast.Result.Equal["CAST_SUCCESS"]}&&!${Me.Gem[${ibuff}].Name.Equal[holy aura]}) {
								/if (!${bufftimer_${Target.Name}_${ibuff}]}) /declare bufftimer_${Target.Name}_${ibuff} timer outer
								/varset bufftimer_${Target.Name}_${ibuff} ${Me.Gem[${ibuff}].Duration.TotalSeconds}s
								/echo Self Buff ${Me.Gem[${ibuff}]} timer, ${Me.Gem[${ibuff}].Duration.TotalSeconds}s
							}
							/if (${Me.Gem[${ibuff}].Name.Equal[holy aura]}) /varset HolyAuraFlag 1
						}
					}
					|/if (${Me.CurrentMana}>${Me.Gem[${ibuff}].Mana} && ${Me.Gem[${ibuff}].Category.Equal[Aura]} && !${Me.Aura.Find[${Me.Gem[${ibuff}]}]}) {
					|	/casting "${Me.Gem[${ibuff}]}" gem${ibuff} -maxtries|3
					|	/delay 10s !${Me.Casting.ID}
					|}
					/call CheckCombat
					/if (${UnderAttack.Equal[TRUE]}) {
						/assist ${Group.MainAssist}
						/return
					}
			   /next ibuff
			 /next buffGroupMember
		   /squelch /target clear
		/return

Sub FindMob
   /varset mob ${targ1}
   :targetloop
   /echo looking for a mob --> ${mob}
   /squelch /target npc radius ${dist} zradius 50 ${mob} los
   /if (!${Target.ID}) {
      /if (${mob.Equal[${targ1}]}) {
         /varset mob ${targ2}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ2}]}) {
         /varset mob ${targ3}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ3}]}) {
         /varset mob ${targ4}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ4}]}) {
         /varset mob ${targ5}
         /goto :targetloop
      }
      /if (${mob.Equal[${targ5}]}) {
         /varset mob ${targ1}
      }
   }

|/alert clear 1
|/alert add 1 corpse radius 50
|/alert clear 2
|/alert add 2 npc radius 75
|/alert clear 3
|/alert add 3 npc radius 200
|/alert clear 4
|/alert add 4 npc radius 400
|
|/declare findTarget_s   int local 0
|/declare findTarget_i   int local 1
|/declare findTarget_n   int local 1
|/if (!${Me.XTarget[1].ID}) {
|	/for findTarget_n 1 to 4 {
|	  /echo clearing target
|	  /squelch /target clear
|	  /if (${NearestSpawn[alert ${findTarget_n}].ID}) {
|		 /for findTarget_i 1 to 30 {
|			/varset findTarget_s ${NearestSpawn[${findTarget_i}, alert ${findTarget_n}].ID}
|			/echo targetting ${NearestSpawn[${findTarget_i}, alert ${findTarget_n}]}
|			/squelch /target id ${findTarget_s}
|			/delay 1s (${Target.ID})
|			/echo is it a corpse?
|			/if (${Target.Type.Equal[corpse]} && (${NearestSpawn[${findTarget_i},npc].LineOfSight})) {
|			   /moveto ID ${Target.ID}
|			   /call LootCorpse
|			   /delay 5s
|			   }
|		 /next findTarget_i
|		 }
|	  }
|	/next findTarget_n
|} else { 
|/squelch /tar id ${Me.XTarget[1].ID}
|/if (${AdvPath.Playing}) /play off
|/if (${Target.ID}) /moveto ID ${Target.ID}
|/delay 1s
|/delay !${Me.Moving}
|/goto :skip 
|}
|
|:skip
   
/return

Sub GetCombatTarget
   /target ${Me.XTarget[1]}
   /delay 2s
| ========= Assist the main tank =========
   /if (!${Target.ID} || ${Target.Type.Equal[corpse]}) {
      /assist ${Group.MainTank}
      /delay 2s
   }
| ========= Last Resort - We know something is there so lets just blindly swing at it =========
   /if (!${Target.ID} || ${Target.Type.Equal[corpse]}) {
      /keypress F8
      /delay 2s
   }
   /varset mob ${Target.CleanName}
/return

Sub CheckCombat
   /if (${Me.XTarget}>0) {
      /if (!${Target.ID} || ${Target.Type.Equal[corpse]}) {
         /call GetCombatTarget
      }
      /varset UnderAttack TRUE
      /if (${Me.Sitting}) /stand
      /return
   }
   /varset UnderAttack FALSE
/return

Sub CheckMana
	/declare WaitForCleric int local 0
	/declare icm int local
	/for icm 0 to 5
		/if (${Select[${Group.Member[icm].Class.ShortName},DRU,CLR,SHM]} && ${Group.Member[icm].PctMana}<75) /varset WaitForCleric 1
	/next icm
	/if (${Me.PctMana}<61 || ${WaitForCleric}>0) /call MedBreak
	/call buff
/return

Sub MoveBack
	/if (!${Target.ID}) /delay 1s
	/face fast
	/keypress back hold
	/delay .2s
	/keypress back
	|/squelch /target clear 
	/delay 1s
/return

Sub Combat
   /if (${stickyon}==1) /varset HaveMoved 1
   /declare ic int local
   /declare cc int local
   /if (${Target.Distance}>100) {
      /face fast nolook
      /keypress forward hold
      :moveloop
      /if (${Target.ID}) /face fast nolook
      /if (${Target.Distance}>100) /goto :moveloop
      /keypress forward
   } 
   /delay 1s
   /if ((${Target.Type.Equal[pc]}||${Target.Master.Type.Equal[pc]}||${Target.Type.Equal[mercenary]})) /return
   |/if (${Target.AggroHolder.Equal[NULL]}) {
		/face fast
		/call Snare
		/casting "${Me.Gem[${pull}]}" gem${pull}
		/doevents Check_Damage
		/delay 4s
   |}
   :combatloop
   /call CheckCombat
   /if (${UnderAttack.Equal[FALSE]}) /goto :endcombat
   /if (${Target.ID}) {
      /if (${Target.ID}) /face fast nolook
      /if (${Me.Pet.ID}) /pet attack
      :finishcastloop
      /if (!${Me.Casting.ID}) {
         /call SpellCheck2
         /call Abilities
         /varset ic 1 
         :beingattacked
         /call CheckCombat
         /if (${UnderAttack.Equal[FALSE]}) /return
         /if (${ic}<5) {
            /varcalc ic ${ic}+1
            /delay 1s
            /doevents Check_Damage
            /goto :beingattacked
         }
         /goto :combatloop
      }
      /delay 2s
      /goto :finishcastloop
   }
   :endcombat
/return

Sub Abilities
   /if (${Me.Skill[tracking]} < ${Skill[tracking].SkillCap} && ${Me.AbilityReady[tracking]}) /doability "tracking"
   /if (${Window[TrackingWnd].Child[TRW_DoneButton]}) /notify TrackingWnd TRW_DoneButton leftmouseup
   /if (!${Target.ID}||${Target.Type.Equal[pc]} && ${Zone.Type}||${Target.Master.Type.Equal[PC]} && ${Zone.Type}||${Target.Type.Equal[corpse]}||${Target.Distance}>${Target.MaxRange}) /return
   /if (${Me.AbilityReady[flying kick]}) /doability "flying kick"
   /if (${Me.AbilityReady[bash]} && (${InvSlot[offhand].Item.Type.Find[shield]}||${Me.AltAbility[2 Hand Bash]})) /doability "bash"
   /if (${Me.Skill[hide]} < ${Skill[hide].SkillCap} && ${Me.AbilityReady[hide]} && ${mode.Equal[skills]}) /doability "hide"
   /if (${Me.Skill[sneak]} < ${Skill[sneak].SkillCap} && ${Me.AbilityReady[sneak]} && ${mode.Equal[skills]}) /doability "sneak"
   /if (${Me.Skill[mend]} < ${Skill[mend].SkillCap} && ${Me.AbilityReady[mend]} && ${mode.Equal[skills]}) /doability "mend"
   /if (${Me.AbilityReady[slam]} && !${Me.AbilityReady[bash]}) /doability "slam"
   /if (${Me.AbilityReady[round kick]}) /doability "round kick"
   /if (${Me.AbilityReady[kick]}) /doability "kick"
   /if (${Me.AbilityReady[elbow strike]} && ${Target.Distance}>30) /doability "elbow strike"
   /if (${Target.Distance}<12 && ${Me.AbilityReady[Disarm]}) /doability "Disarm"
   /if (${Me.AbilityReady[Backstab]} && ${Melee.Behind}) /doability "Backstab"
   /if (${Me.AbilityReady[Banestrike]}) /doability "Banestrike"
/return
		
Sub Event_Farm_talk
   /if (${afkset}) {
      /camp
      /endmac
   }
/return

Sub Event_We_Died
   /gsay Logging
   /camp
   /endmac
/return

Sub MedBreak
   /gsay Medding
   /hidecorpse all
   /declare WaitForCleric int local 0
   /declare imb int local
   /sit
   :medloop
   /call CheckCombat
   /if (${UnderAttack.Equal[TRUE]}) /return
   /if (!${Me.Sitting}) /sit
   /delay 5s
   /for imb 0 to 5
   	   /if (${Select[${Group.Member[imb].Class.ShortName},DRU,CLR,SHM]} && ${Group.Member[imb].PctMana}<95) /varset WaitForCleric ${WaitForCleric}+1
   /next imb
   /if (${Me.PctMana}<95 || ${WaitForCleric}>0) /goto :medloop
/return
		
Sub Snare
/declare inm int local
/if (!${Target.ID}||(${Target.Type.Equal[pc]}||${Target.Master.Type.Equal[pc]}||${Target.Type.Equal[corpse]})) /return
/echo Snaretimer if ((!${Defined[Snare_${Target.ID}]} || ${Snare_${Target.ID}}<15) || ((${Target.PctHPs}<=30) && (${Target.PctHPs}>=20)))
/if ((!${Defined[Snare_${Target.ID}]} || ${Snare_${Target.ID}}<15) || ((${Target.PctHPs}<=30) && (${Target.PctHPs}>=20))) {
	/for inm 1 to 12
		/if (${Me.CurrentMana}>${Me.Gem[${inm}].Mana} && ${Me.Gem[${i}].Subcategory.Equal[Snare]}) {
			/casting "${Me.Gem[${inm}]}" gem${inm}
			/delay 10s !${Me.Casting.ID}
			/delay 2s
			/if (${Cast.Result.Equal["CAST_SUCCESS"]}) {
				/if (!${Defined[Snare_${Target.ID}]}) /declare Snare_${Target.ID} timer outer
				/varset Snare_${Target.ID} ${Me.Gem[${snaregem}].Duration.TotalSeconds}s
			}
		}
	/next inm
}
/return
		
		Sub Pet
		/if (${Target.ID}) /declare temp int local ${Target.ID}
		   /if (!${Me.Pet.ID}) {
			  /declare ipet int local
			  /for ipet 1 to 12
			  /if (${Me.CurrentMana}>${Me.Gem[${ipet}].Mana} && ${Me.Gem[${ipet}].Category.Equal[pet]} && ${Me.Gem[${ipet}].Subcategory.Find[summon]}) {
				 /delay 10s !${Me.Casting.ID}
				 /casting "${Me.Gem[${ipet}]}" gem${ipet}
				 /delay 10s !${Me.Casting.ID}
				 /delay 2s
				 /return
			  }
			  /next ipet
		   }
		   /if (${Me.Pet.ID}) {
			  /declare ipet2 int local
			  /for ipet2 1 to 12
			  /if (${Me.CurrentMana}>${Me.Gem[${ipet2}].Mana} && ((${Me.Gem[${ipet2}].Category.Equal[pet]} && ${Me.Gem[${ipet2}].Subcategory.Find[haste]})||(${Me.Gem[${ipet2}].Name.Find[earthen]}&&${EarthenFlag}<1)) && ${Me.Gem[${ipet2}].StacksPet} && !${Me.Pet.Buff[${Me.Gem[${ipet2}]}]}) {
				 /casting "${Me.Gem[${ipet2}]}" gem${ipet2}
				 /delay 10s !${Me.Casting.ID}
				 /delay 2s
				 /if (${Cast.Result.Equal["CAST_SUCCESS"]}&&!${Me.Gem[${ipet2}].Name.Find[earthen]}) {
					/if (!${Defined[PetBuff_${ipet2}]}) /declare PetBuff_${ipet2} timer outer
					/varset PetBuff_${ipet2} ${Me.Gem[${ipet2}].Duration.TotalSeconds}s
					/g setting ${Me.Gem[${ipet2}]} timer, ${Me.Gem[${ipet2}].Duration.TotalSeconds}s
			 	 }
				 /if (${Me.Gem[${ipet2}].Name.Find[earthen]}) /varset EarthenFlag 1
				 /return
			  }
			  /next ipet2
		   }
		/if (${temp}) /squelch /tar id ${temp}
		/return